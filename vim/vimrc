" File Name   : vimrc
" Author      : KnightCS
" Description : My vim configure.
" -------------
"  version 3.0: 2017-01-27
"   reorganize.
" -------------
"  version 2.0: **
"   add some configure and grouping.
" -------------
"  version 1.0: **
"   create.

" 0. 使用说明
" ==========
" 0.1 快捷键
" ----------
" <leader>:';'
" <leader>ev: 编辑配置文件
" <leader>isp: invspell
" <leader><space>: quickfix模式，写入并make
" <leader>nv: 插入新的版本描述
" 折叠：
"   <leader>z: 打开/关闭折叠
"   <leader>Z: 打开/关闭全部折叠
"   zC: 对所在范围内所有嵌套的折叠点进行折叠
"   zO: 对所在范围内所有嵌套的折叠点展开
"   zv: 查看此行
"   zj: 移动到下一个折叠
"   zk: 移动到上一个折叠
"   zn: 禁用折叠
"   zN: 启用折叠
" 拼写检查：
"   ]s: 下一个拼写错误
"   [s: 上一个拼写错误
"   z=: 拼写纠正建议
"   zg: 拼写正确，添加到用户字典
"   zG: 在会话中当作正确拼写
"   zw: 拼写错误，添加到用户错误字典
"   zW: 在会话中当作错误拼写
"   :spellr: 重新进行拼写检查

" 1. 一般设置
" ==========

" 1.0 全局变量设置
" ----------
let mapleader = ';'

" 1.1
" ----------
" 不强制兼容vi
set nocompatible
" 启动的时候不显示那个援助索马里儿童的提示
set shortmess=atl
" 去掉输入错误的提示声音
set noeb

" history文件中需要记录的行数
set history=1000
" 共享剪贴板
set clipboard+=unnamed
" 保存全局变量
set viminfo +=!

" 使回格键（backspace）正常处理indent, eol, start等
set backspace=2
" 允许backspace和光标键跨越行边界
"set whichwrap+=<,>,h,l,b,s,[,]

" 通过使用:substitute命令，告诉我们文件的哪一行被改变过
set report=0
" 编辑配置文件
nmap <leader>ev :edit $MYVIMRC<CR>
" quickfix模式
"autocmd FileType c,cpp map <buffer> <leader><space> :w<cr>:make<cr>

" 拼写检查
set nospell
" 拼写检查的语言：英文+中文
set spelllang=en_us,cjk
nmap <silent> <leader>isp :setlocal invspell<cr>

" 1.2 目录、文件
" ----------
" 载入文件类型插件
filetype plugin on
" 为特定文件类型载入相关缩进文件
filetype indent on

" 自动切换当前目录为当前文件所在的目录
set autochdir
" 设置当文件被改动时自动载入
set autoread
" 自动保存
set autowrite
" 在处理未保存或只读文件的时候，弹出确定
set confirm

" 覆盖文件时不备份
" 禁止生成临时文件
set nobackup
set nowritebackup
set noswapfile
set noundofile
" 设置备份时的行为为覆盖
"set backupcopy=yes

" 1.3 字符编码
" ----------
" 内部使用字符编码方式
set encoding=utf-8
set langmenu=zh_CN.utf-8
language message en_US.utf-8
" 屏幕显示编码
set termencoding=utf-8
" 设定默认解码
set fileencodings=ucs-bom,utf-8,cp936
set fileencoding=utf-8
set fenc=utf-8
set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936,big5,euc-kr,latin1s

" 2. 显示
" ==========

" 2.1 显示中文帮助
" ----------
if version >= 603
    set helplang=cn
endif

" 2.2 VIM外框设置
" ----------
if has('gui_running')
    " 去掉边框
    set go=
    " 隐藏工具栏
    set guioptions-=T
    " 隐藏菜单栏
    set guioptions-=m
    " 设置为256色
    set t_Co=256
    " 设置字体
    set guifont=Courier_New:h10:cANSI,Monaco:h9:cANSI,Monaco\ 12
endif

" 2.3 设置魔术
" ----------
" magic(\m)：除了 $ . * ^ 之外其他元字符都要加反斜杠。
" nomagic(\M)：除了 $ ^ 之外其他元字符都要加反斜杠。
set magic

" 2.4 设置主题
" ----------
" 语法高亮
syntax enable
syntax on

" 减小移动时的延迟
set ttyfast
set lazyredraw

" 使用desert主题
colorscheme desert
if g:colors_name == "desert" && !&termguicolors
    " diff
    hi! DiffAdd    ctermbg=022
    hi! DiffText   ctermbg=094
    hi! DiffChange ctermbg=234
    hi! DiffDelete ctermbg=052
    " Pmenu
    hi! Pmenu    cterm=underline ctermbg=234 ctermfg=141
    hi! PmenuSel cterm=underline ctermbg=233 ctermfg=135
    " CursorLine
    hi! CursorLine   cterm=NONE ctermbg=054
    hi! CursorLineNr cterm=NONE ctermbg=054 ctermfg=038
    hi! LineNr       cterm=NONE ctermbg=232 ctermfg=038
    " ColorColumn
    hi! ColorColumn     cterm=NONE ctermbg=232 ctermfg=196
    " ExtraWhitespace
    hi! ExtraWhitespace cterm=NONE ctermbg=196 ctermfg=234
    " 修改搜索时的颜色
    hi! Search ctermfg=White ctermbg=196
    " Sign
    hi! SignColumn                ctermbg=234
    hi! SyntasticErrorSign        ctermfg=196
    hi! SyntasticWarningSign      ctermfg=202
    hi! SyntasticStyleErrorSign   ctermfg=001
    hi! SyntasticStyleWarningSign ctermfg=226
    hi! ALEErrorSign              ctermfg=196
    hi! ALEWarningSign            ctermfg=202
    hi! ALEStyleErrorSign         ctermfg=001
    hi! ALEStyleWarningSign       ctermfg=226
    " 分隔符
    hi! vertSplit ctermfg=234 ctermbg=038
    " 状态栏中间状态
    hi! StatusLineNC ctermfg=239
    " SpellLocal
    hi! SpellLocal cterm=NONE ctermbg=038
    " MatchParen
    hi! link MatchParen Search
endif

" 高亮显示匹配的括号
set showmatch
" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1

" 显示行号
set number
" 显示相对行号
"set relativenumber
" 行号大小
set numberwidth=4

" 显示制表符
set list
" 将制表符显示为'➧'
set listchars=tab:\➧\ 
" 结尾空格显示为'…'
set listchars+=trail:\…
" 左侧超出部分显示为'«'
set listchars+=precedes:«
" 右侧超出部分显示为'»'
set listchars+=extends:»

" 代码补全
set completeopt=preview,menu

" 2.5 光标
" ----------
" 不要闪烁
set novisualbell
" 光标移动到buffer的顶部和底部时保持5行距离
set scrolloff=5

" 2.6 折叠
" ----------
" 允许折叠
set foldenable
" 手动折叠
"set foldmethod=manual
"set foldmethod=indent
" 把{{{和}}}之间的内容折叠
set foldmethod=marker
" 折行前空出4字符显示折行标识
set foldcolumn=0
set foldlevel=0
" 默认不折叠
"set foldlevelstart=99
" 映射折叠/不折叠键为 <leader>z
nmap <silent> <leader>z @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
" 映射全部折叠/不折叠键为 <leader>Z
nmap <silent> <leader>Z @=(&foldlevel ? 'zM' : 'zR')<CR>

" 2.7 命令行、状态栏
" ----------
" 左下角的状态
set showmode
" 增强模式中那个的命令行自动完成操作
set wildmenu
" 输入的命令显示出来，看的清楚些
set showcmd
" 命令行（在状态行下）的高度，默认为1，这里是2
set cmdheight=1
" 打开状态栏标尺
set ruler

" 启动显示状态行(1),总是显示状态行(2)
set laststatus=2
" 启动table行
set showtabline=2

" 2.8 搜索和匹配
" ----------
" 搜索逐字符高亮
set hlsearch
" 在搜索的时候忽略大小写
set ignorecase
" 在搜索时，输入的词句的逐字符高亮（类似firefox的搜索）
set incsearch

" 2.9 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
" ----------
set mouse+=a
set selection=exclusive
set selectmode=mouse,key

" 2.10 在被分割的窗口间显示空白，便于阅读
" ----------
set fillchars=stl:\ 
set fillchars+=stlnc:\ 
"set fillchars+=vert:\┋
set fillchars+=vert:\ 
set fillchars+=fold:-
set fillchars+=diff:\ 

" 3. 文本格式和排版
" ==========
" 检测文件类型
filetype plugin indent on
" 自动格式化
set formatoptions=tcrqn
" 继承前一行的缩进方式，特别适用于多行注释
set autoindent
" 使用C样式的缩进
set cindent
" 为C程序提供自动缩进
set smartindent
" Tab键的宽度4
set tabstop=4
" 统一缩进为4
set softtabstop=4
set shiftwidth=4

" 用空格代替制表符
set expandtab
" 不要换行
set nowrap
" 设置默认自动换行宽度为120
set textwidth=120
" 字符间插入的像素行数目
set linespace=0
" 带有如下符号的单词不要被换行分割
set iskeyword+=_,$,@,%,#,-
" 设置标志线的位置，默认
set colorcolumn=81,101,121

" 在行和段开始处使用制表符
set smarttab
" 行内替换
set gdefault

" 4. Tags
" ==========
let g:ctags_bin = substitute(system('which ctags'), '\n', '', '')
if g:ctags_bin !~ "ctags$"
    let g:ctags_bin = ""
endif
set tags+=./tags;

" 5. Load My Vim Plugin
" ==========
if !empty(glob("~/.vim/autoload/myplugin.vim"))
    silent! call myplugin#begin()
endif

" 6. 自定义函数
" ==========
" - c、c++、java、python、bash、lua、rust等文件自动添加文件头
" ----------

""
" @brief  插入文件头
"
" @return NULL
"
function! AddFileTitle()
    let l:support_filetype = ['c', 'cpp', 'python', 'sh', 'java', 'rust', 'lua', 'plantuml']
    if index(l:support_filetype, &filetype) < 0
        return
    endif

    let l:file_name   = expand("%:r")
    let l:user_name   = "KnightCS"
    let l:user_email  = ""
    let l:user        = l:user_name . ' (' . l:user_email . ')'
    let l:create_time = strftime("%Y-%m-%d %H:%M:%S")

    if &filetype == 'sh'
        call setline(1,          "\#!/bin/bash")
        call append(line("."),   "\# >File Name   : ".l:file_name)
        call append(line(".")+1, "\# >Author      : ".l:user)
        call append(line(".")+2, "\# >Description :")
        call append(line(".")+3, "\# >#############")
        call append(line(".")+4, "\# > version 1.0: ".l:create_time)
        call append(line(".")+5, "\#       >")
        call append(line(".")+6, "")
        normal! G
    elseif &filetype == 'python'
        call setline(1,          "\#!/usr/bin/python")
        call append(line("."),   "\# -*- coding: UTF-8 -*-")
        call append(line(".")+1, "\# >File Name   : ".l:file_name)
        call append(line(".")+2, "\# >Author      : ".l:user)
        call append(line(".")+3, "\# >Description :")
        call append(line(".")+4, "\# >#############")
        call append(line(".")+5, "\# > version 1.0: ".l:create_time)
        call append(line(".")+6, "\#       >")
        call append(line(".")+7, "")
        call append(line(".")+8, "if __name__ == '__main__':")
        call append(line(".")+9, "    pass")
        normal! 9G
    elseif &filetype == 'lua'
        call setline(1,          "\#!/usr/bin/lua")
        call append(line("."),   "-- >File Name   : ".l:file_name)
        call append(line(".")+1, "-- >Author      : ".l:user)
        call append(line(".")+2, "-- >Description :")
        call append(line(".")+3, "-- >-------------")
        call append(line(".")+4, "-- > version 1.0: ".l:create_time)
        call append(line(".")+5, "--      >")
        call append(line(".")+6, "")
        normal! G
    elseif &filetype == 'plantuml'
        call setline(1,          "@startuml")
        call append(line("."),   "")
        call append(line(".")+1, "@enduml")
        normal! 2G
    else
        call setline(1,          "\/**")
        call append(line("."),   " * File Name   : ".l:file_name)
        call append(line(".")+1, " * Author      : ".l:user)
        call append(line(".")+2, " * Description :")
        call append(line(".")+3, " * *************")
        call append(line(".")+4, " *  version 1.0: ".l:create_time)
        call append(line(".")+5, " *      >")
        call append(line(".")+6, " **/")
        call append(line(".")+7, "")
        normal! G
    endif
endfun

""
" @brief     插入新版本描述
"
" @param[in] 新版本号
"
" @return    NULL
"
function! NewVersion(var)
    let l:support_filetype = ['c', 'cpp', 'python', 'sh', 'java', 'rust', 'lua']
    if index(l:support_filetype, &filetype) < 0
        return
    endif

    " 没有文件头的文件直接返回
    if (&magic && search('version [0-9]\+\.[0-9]\+:', 'ncp') <= 0)
                \ || (!&magic && search('version \[0-9]\+.\[0-9]\+:', 'ncp') <=0)
            return
    endif

    let l:create_time = strftime("%Y-%m-%d %H:%M:%S")
    if &filetype == 'sh'
        call append(5, "\# > version " . string(a:var) . ": " . l:create_time)
        call append(6, "\#       >" )
        call append(7, "\# >#############")
        normal! 7G$
    elseif &filetype == 'python'
        call append(6, "\# > version " . string(a:var) . ": " . l:create_time)
        call append(7, "\#       >" )
        call append(8, "\# >#############")
        normal! 8G$
    elseif &filetype == 'lua'
        call append(4, "-- >-------------")
        call append(5, "-- > version " . string(a:var) . ": " . l:create_time)
        call append(6, "--      >")
        normal! 7G$
    else
        call append(5, " *  version " . string(a:var) . ": " . l:create_time)
        call append(6, " *      >" )
        call append(7, " * *************")
        normal! 7G$
    endif
endfun
nmap <leader>nv :call NewVersion()<Left>

if has("autocmd")
    " 重新打开文件时，光标定位到上次打开的位置
    augroup resCur
        autocmd!
        autocmd BufReadPost *
                    \ if line("'\"") > 0 && line("'\"") <= line("$") |
                    \   call setpos(".", getpos("'\"")) |
                    \ endif
    augroup END

    " 定制配置字符的颜色
    augroup CustomMatch
        autocmd!
        " 标记代码中未被用作缩进的制表符
        autocmd WinEnter,BufWinEnter * :call matchadd('ColorColumn', '[^\t]\zs\t\+')
    augroup END

    " 活动窗口突出显示当前行 & 显示限制竖线，非活动窗口不显示
    augroup HightlightActiveWindow
        autocmd!
        autocmd BufWinEnter *
                    \ let w:old_colorlumn=&l:colorcolumn |
                    \ if argc() < 2 |
                    \   setlocal cursorline |
                    \ endif
        autocmd WinEnter *
                    \ setlocal cursorline |
                    \ if exists("w:old_colorlumn") |
                    \   let &l:colorcolumn=w:old_colorlumn |
                    \ endif
        autocmd WinLeave *
                    \ setlocal nocursorline |
                    \ let &l:colorcolumn=0
    augroup END

    augroup AutoSourceVimrc
        autocmd!
        autocmd BufWritePost $MYVIMRC nested source $MYVIMRC
    augroup END

    augroup autoFileHead
        autocmd!
        " 新建文件时，识别支持的文件自动加入文件头
        autocmd BufNewFile * call AddFileTitle()
    augroup END
endif

" 7. Other
" ==========
" 7.1 Platform judgment
" unix:Linux/MAC/Cygwin
" macunix:MAC
" win32unix/win64unix:Cygwin
" win32/win64:Windows
" Other is Unknow OS
"
" keyboard-symbols
" http://www.ifreesite.com/typing/keyboard-symbols.htm
" ❖ ⿰ ⿱ ⿲ ⿳ ⿴ ⿵ ⿶ ⿻ ☈ ◆ ◇ ⌥ • ❏ ❐ ❒ § « » ✗ ✓ ○ ● ◎ ≡ ∑
" │ ─ ═ ┄ ┈ ﹊ ﹍ ☰ ┆ ┇ ┊ ┋
"↑↓←→↖↗↙↘➻➼➽➸➳➺➻➴➵➶➷➹➩➪➫➬➭➮➯➱➲➾➔➘➙➚➛➜➝➞➟➠➡➢➣➤➥➦➧➨⇒⇔
